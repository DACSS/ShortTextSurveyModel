2+2
2*2+2
2*(2+2)
2*2^2+2*2-2
setwd("C:/Users/Tim/Deskptop/My Working Directory/")
myData<-read.csv("myData.csv",header=T,stringsAsFactors=F)
myData<-read.csv(file.choose(),header=T,stringsAsFactors=F)
View(myData)
names(myData) #Gives you the variable names (column names)
head(myData,n = 10) #Shows you the first 'n' rows in the dataset
str(myData) #Lets you see what kind of variable is in each column
class(myData$ID) #Lets you see what kind of variable a specific column is
class(myData$Major)
View(myData) #Lets you look at the whole dataframe separately
mean(myData$Age)
median(myData$Age)
mean(myData$DaysDrink)
mean(myData$NumDrinks)
mean(myData$DaysDrink[which(myData$Major=="PolSci")])
mean(myData$DaysDrink[which(myData$Major=="Legal")])
mean(myData$NumDrinks[which(myData$Major=="PolSci")])
mean(myData$NumDrinks[which(myData$Major=="Legal")])
range(myData$Age)
range(myData$NumDrinks)
var(myData$NumDrinks)
sd(myData$NumDrinks)
hist(myData$NumDrinks,breaks="FD")
hist(myData$DaysDrink,breaks=10)
plot(myData$Height,myData$NumDrinks)
plot(myData$Weight,myData$NumDrinks)
v<-2
v+5
v/3
ageMean<-mean(myData$Age)
ageMean
ageMean
dayMean<-mean(myData$DaysDrink)
dayMean
drinkMean<-mean(myData$NumDrinks)
drinkMean
myData$weekDrink<-myData$DaysDrink * myData$NumDrinks #Multiply days by number
myData$weekDrink
mean(myData$weekDrink) #Get the mean
hist(myData$weekDrink,breaks=10) #Plot the distribution
plot(myData$Height,myData$weekDrink) #Plot the relationship with height
ranSamp<-sample(x = 1:1000, size = 100, replace = F)
ranSamp
mean(ranSamp)
names(myData) #Get the names to mimic in your dataset!
set.seed(328) #Set a seed for reproducibility of sampling
ids<-1:100
ages<-sample(x = 18:30, size = 100, replace = T)
heights<-sample(x = 52:84, size = 100, replace = T)
weights<-sample(x = 100:250, size = 100, replace = T)
majors<-sample(x = c("PolSci","Legal","Soc"), size = 100, replace = T)
majors<-sample(x = c("PolSci","Legal","Soc"), size = 100, replace = T)
majors
days<-sample(x = 0:7, size = 100, replace = T)
drinks<-sample(x = 1:12, size = 100, replace = T)
myNewData<-data.frame(ID=ids,
Age=ages,
Height=heights,
Weight=weights,
Major=majors,
DaysDrink=days,
NumDrinks=drinks)
View(myNewData)
myNewData$NumDrinks[which(myNewData$DaysDrink==0)]<-0
myNewData$NumDrinks[which(myNewData$DaysDrink==0)]
getwd()
row.names(myNewData)
write.csv(myNewData,"myNewData.csv",row.names=F)
load("C:/Users/Tim/Dropbox/BEXnet The Next Generation/Precision Recall/zelig_model_with_5e+05_missing_observations_no_all.RData")
library(Zelig)
install.packages("Zelig")
library(Zelig)
load("C:/Users/Tim/Dropbox/BEXnet The Next Generation/Precision Recall/zelig_model_with_5e+05_missing_observations_no_all.RData")
sco.maj<-matrix(0,nrow=9,ncol=11)
rownames(sco.maj)<-c("Scalia", "Kennedy", "Thomas", "Ginsberg", "Breyer", "Roberts", "Alito", "Sotomayor", "Stevens")
colnames(sco.maj)<-paste("sco",1:11,sep="")
sco.maj[,1]<-c(0,0,1,1,1,0,1,1,0)
sco.maj[,2]<-1
sco.maj[,3]<-c(0,1,0,0,1,1,0,1,1)
sco.maj[,4]<-c(1,1,1,0,0,1,1,1,1)
sco.maj[,5]<-c(0,0,0,1,1,1,1,1,1)
sco.maj[,6]<-c(1,1,1,1,1,1,1,0,1)
sco.maj[,7]<-c(0,1,1,1,1,1,1,1,1)
sco.maj[,8]<-c(0,1,0,1,1,1,0,1,1)
sco.maj[,9]<-c(1,1,0,0,1,0,1,0,1)
sco.maj[,10]<-c(1,1,0,1,1,1,0,1,1)
sco.maj[,11]<-c(1,1,0,1,0,1,1,1,0)
sco.dis<-matrix(0,nrow=9,ncol=11)
rownames(sco.dis)<-c("Scalia", "Kennedy", "Thomas", "Ginsberg", "Breyer", "Roberts", "Alito", "Sotomayor", "Stevens")
colnames(sco.dis)<-paste("sco",1:11,sep="")
sco.dis[,1]<-c(1,1,0,0,0,1,0,0,1)
sco.dis[,3]<-c(0,0,1,1,0,0,1,0,0)
sco.dis[,6]<-c(0,0,0,0,0,0,0,1,0)
sco.dis[,7]<-c(1,0,0,0,0,0,0,0,0)
sco.dis[,8]<-c(1,0,1,0,0,0,1,0,0)
sco.dis[,9]<-c(0,0,1,1,0,1,0,1,0)
sco.dis[,10]<-c(0,0,1,0,0,0,1,0,0)
sco.dis[,11]<-c(0,0,1,0,1,0,0,0,1)
##Concurring Affiliation Matrix
sco.con<-matrix(0,nrow=9,ncol=11)
rownames(sco.con)<-c("Scalia", "Kennedy", "Thomas", "Ginsberg", "Breyer", "Roberts", "Alito", "Sotomayor", "Stevens")
colnames(sco.con)<-paste("sco",1:11,sep="")
sco.con[,3]<-c(1,0,0,0,0,0,0,0,0)
sco.con[,4]<-c(0,0,0,1,1,0,0,0,0)
sco.con[,5]<-c(1,1,1,0,0,0,0,0,0)
sco.majnet<-sco.maj%*%t(sco.maj)
sco.disnet<-sco.dis%*%t(sco.dis)
sco.connet<-(sco.maj+sco.con)%*%t(sco.maj+sco.con)
sco.totnet<-sco.majnet + sco.disnet + sco.con%*%t(sco.con)
sco.tie<-matrix(0,nrow=9,ncol=9)
rownames(sco.tie)<-c("Scalia", "Kennedy", "Thomas", "Ginsberg", "Breyer", "Roberts", "Alito", "Sotomayor", "Stevens")
colnames(sco.tie)<-rownames(sco.tie)
sco.tie[,1]<-c(4,1,1,1,1,0,0,1,1)
sco.tie[,2]<-c(2,3,1,1,0,2,2,2,1)
sco.tie[,3]<-0
sco.tie[,4]<-c(0,0,0,2,2,1,1,1,1)
sco.tie[,5]<-c(0,0,1,1,1,0,1,1,0)
sco.tie[,6]<-c(1,1,1,1,0,2,0,1,0)
sco.tie[,7]<-c(2,1,3,1,1,0,4,0,1)
sco.tie[,8]<-c(0,1,0,0,1,1,0,2,1)
sco.tie[,9]<-c(1,1,2,1,2,1,1,1,2)
##indegree
colSums(sco.tie)-diag(sco.tie)
rowSums(sco.tie)-diag(sco.tie)
plot(network(sco.tie, directed=TRUE), label=rownames(sco.tie))
library(network)
plot(network(sco.tie, directed=TRUE), label=rownames(sco.tie))
plot(network(sco.tie>1, directed=TRUE), label=rownames(sco.tie))
plot(network(sco.totnet>8), label=rownames(sco.disnet))
supcourt<-SCDB_2011_01_justiceCentered_Citation
scourt<-supcourt[supcourt$vote%in%1:4,c("caseId", "justiceName", "vote", "dateDecision")]
###################################################################
############## Welcome to week 1 of Network Methods! ##############
###################################################################
# This script will introduce commands to do the following:        #
# 1. Reading network data into R (lines 16:27),                   #
# 2. Inspecting network data for use with libraries (lines 29:59),#
# 3. Generating networks within R using packages (lines 61:76),   #
# 4. Adding node attributes to network actors (lines 78:109), and #
# 5. adding edge weights, and other attributes (lines 111:164).   #
###################################################################
# Steps 3,4 and 5 vary depending on the structure of the data     #
# Choose the options that best suit your dataset, and consult     #
# if you are unsure which choice applies to your data             #
###################################################################
setwd("C:/Users/Tim/Google Drive/Political Networks Course/")
library(igraph)
load("./Datasets/cow_trade_edgelist.RData") #Load in the trade dataset
node_attr<-read.csv("./Datasets/cow_node_attributes.csv",header=T,stringsAsFactors=F)
View(node_attr)
head(node_attr)
dim(trade_edge) #Number of rows and columns
names(trade_edge) #Names of the columns
head(trade_edge) #Look at the full dataset
trade_edge$from<-as.character(trade_edge$from)
trade_edge$to<-as.character(trade_edge$to)
network<-graph.edgelist(as.matrix(trade_edge[,c("from","to")]),directed=T)
E(network)$weight<-trade_edge$weight #Specify the weights values
E(network)$year<-trade_edge$year #Specify years of relationships
V(network)$long_name<-node_attr$StateNme[match(V(network)$name,node_attr$CCode)]
V(network)$short_name<-node_attr$StateAbb[match(V(network)$name,node_attr$CCode)]
year<-2007 #We set this as a variable, in case we want to quickly look at other years
E(network)$keep=E(network)$year==year #Identify edges to keep in the network subset
network_2007<-subgraph.edges(graph=network,eids=E(network)[E(network)$keep==T]) #Create subgraph
degree(network_2007) #This prints the degree score for all nodes in the network you specify
degree(network_2007,normalized=T) #This prints the normalized (relative) scores
degree(network_2007,mode="in")[1:10] #This calculates only in-degree (edges pointing inward)
degree(network_2007,mode="out")[1:10] #And this calculates out-degree (edges facing outward)
degreeDF<-data.frame(nodes=V(network_2007)$long_name,
degree_all=degree(network_2007),
degree_normalized=degree(network_2007,normalized=T),
degree_in=degree(network_2007,mode="in"),
degree_out=degree(network_2007,mode="out"))
head(degreeDF)
attach(degreeDF)
range(degree_all) #What's the range?
mean(degree_all) #What's the mean?
sd(degree_all) #What's the standard deviation?
hist(degree_all,breaks="FD", #Specifying "FD" algorithmically optimizes the bin count
main="Histogram of Total Degree Score: 2007 Trade",xlab="Total Degree Score")
range(degree_in)
range(degree_out)
range(degree_normalized)
mean(degree_in)
mean(degree_out)
mean(degree_normalized)
sd(degree_in)
sd(degree_out)
sd(degree_normalized)
hist(degree_in,breaks="FD",main="Histogram of In-Degree Score: 2007 Trade",
xlab="In-Degree Score")
hist(degree_out,breaks="FD",main="Histogram of Out-Degree Score: 2007 Trade",
xlab="Out-Degree Score")
hist(degree_normalized,breaks="FD",main="Histogram of Normalized Degree Score: 2007 Trade",
xlab="Normalized Degree Score")
detach(degreeDF)
centr_degree(network_2007)
centr_degree(network_2007)$res
centr_degree(network_2007)$centralization
centr_degree(network_2007)$theoretical_max
vcount(network_2007)*(vcount(network_2007)-1)*2
centr_degree(network_2007,normalized=T)
centr_degree(network_2007,mode="in")
centr_degree(network_2007,mode="out")
years<-min(trade_edge$year):max(trade_edge$year) #Identify all years in the dataset
nodeDF<-data.frame(matrix(NA,nrow(node_attr),length(years)+2)) #Build hollow data frame
names(nodeDF)<-c("code","name",years) #Prepare it to fill with actor-level scores
nodeDF$code<-node_attr$CCode
nodeDF$name<-node_attr$StateNme
centrDF<-data.frame(year=years,centr=NA) #Build empty data frame for centralization scores
E(network)$keep=F
for(y in years){
E(network)$keep=E(network)$year==y #Identify edges to keep in the network subset
network_sub<-subgraph.edges(graph=network,eids=E(network)[E(network)$keep==T]) #Create subgraph
scoresTemp<-data.frame(score=degree(network_sub,normalized=F))
nodeDF[,as.character(y)]<-scoresTemp$score[match(nodeDF$code,row.names(scoresTemp))]
centrDF[grep(y,years),2]<-centr_degree(network_sub,normalized=F)$centralization
E(network)$keep=F
rm(network_sub,scoresTemp)
}
hist(centrDF$centr,breaks="FD",main="Distribution of International Trade Network Centralization Scores")
centrDF$centr
for(y in years){
E(network)$keep=E(network)$year==y #Identify edges to keep in the network subset
network_sub<-subgraph.edges(graph=network,eids=E(network)[E(network)$keep==T]) #Create subgraph
scoresTemp<-data.frame(score=degree(network_sub,normalized=F))
nodeDF[,as.character(y)]<-scoresTemp$score[match(nodeDF$code,row.names(scoresTemp))]
centrDF[grep(y,years),2]<-centr_degree(network_sub,normalized=T)$centralization
E(network)$keep=F
rm(network_sub,scoresTemp)
}
hist(centrDF$centr,breaks="FD",main="Distribution of International Trade Network Centralization Scores")
hist(centrDF$centr,breaks=20,main="Distribution of International Trade Network Centralization Scores")
plot(centrDF$year,centrDF$centr,type="b",ylim=c(0,1),main="International Trade Network Centralization over Time")
abline(lm(centr~year,data=centrDF)) #What's the overall trend?
plot(centrDF$year,centrDF$centr,type="b",ylim=c(0,1),main="International Trade Network Centralization over Time")
abline(lm(centr~year,data=centrDF)) #What's the overall trend?
centrDF_sub<-centrDF[centrDF$year>1950,]
hist(centrDF_sub$centr,breaks="FD",main="Distribution of International Trade Network Centralization Scores since 1950")
plot(centrDF_sub$year,centrDF_sub$centr,type="b",ylim=c(0,1),main="International Trade Network Centralization since 1950")
abline(lm(centr~year,data=centrDF_sub))
nodeDF$name
c<-nodeDF$name[19] #You can change this to look at others!
scores<-as.numeric(nodeDF[nodeDF$name==c,3:ncol(nodeDF)])
hist(scores,breaks="FD",main=paste("Distribution of Centrality Scores for ",c,sep=""))
for(y in years){
E(network)$keep=E(network)$year==y #Identify edges to keep in the network subset
network_sub<-subgraph.edges(graph=network,eids=E(network)[E(network)$keep==T]) #Create subgraph
scoresTemp<-data.frame(score=degree(network_sub,normalized=T))
nodeDF[,as.character(y)]<-scoresTemp$score[match(nodeDF$code,row.names(scoresTemp))]
centrDF[grep(y,years),2]<-centr_degree(network_sub,normalized=T)$centralization
E(network)$keep=F
rm(network_sub,scoresTemp)
}
hist(centrDF$centr,breaks=20,
main="Distribution of International Trade Network Centralization Scores",
xlab="Centralization Score")
plot(centrDF$year,centrDF$centr,type="b",ylim=c(0,1),
main="International Trade Network Centralization over Time",
xlab="Year",ylab="Centralization Score")
abline(lm(centr~year,data=centrDF)) #What's the overall trend?
centrDF_sub<-centrDF[centrDF$year>1950,]
hist(centrDF_sub$centr,breaks="FD",
main="Distribution of International Trade Network Centralization Scores since 1950",
xlab="Centralization Score")
centrDF_sub<-centrDF[centrDF$year>1950,]
hist(centrDF_sub$centr,breaks="FD",
main="Distribution of Internat'l Trade Network Centralization Scores since 1950",
xlab="Centralization Score")
plot(centrDF_sub$year,centrDF_sub$centr,type="b",ylim=c(0,1),
main="International Trade Network Centralization since 1950",
xlab="Year",ylab="Centralization Score")
abline(lm(centr~year,data=centrDF_sub))
nodeDF$name
c<-nodeDF$name[19] #You can change this to look at others!
scores<-as.numeric(nodeDF[nodeDF$name==c,3:ncol(nodeDF)])
hist(scores,breaks="FD",
main=paste("Distribution of Centrality Scores for ",c,sep=""),
xlab="Centrality Score")
c<-nodeDF$name[19] #You can change this to look at others!
scores<-as.numeric(nodeDF[nodeDF$name==c,3:ncol(nodeDF)])
hist(scores,breaks=length(scores)/10,
main=paste("Distribution of Normalized Centrality Scores for ",c,sep=""),
xlab="Centrality Score")
plot(years[years>1950],scores[years>1950],type="b",
ylim=c(1,2),main=paste("Centrality Scores for ",c," since 1950",sep=""),
xlab="Year",ylab="Centrality Score")
fit<-lm(scores[years>1950]~years[years>1950])
abline(fit)
plot(years[years>1950],scores[years>1950],type="b",
ylim=c(min(scores)-0.1,max(scores)+0.1),
main=paste("Centrality Scores for ",c," since 1950",sep=""),
xlab="Year",ylab="Centrality Score")
min(scores)-0.1
scores
plot(years[years>1950],scores[years>1950],type="b",
ylim=c(min(scores,na.rm = T)-0.1,max(scores,na.rm=T)+0.1),
main=paste("Centrality Scores for ",c," since 1950",sep=""),
xlab="Year",ylab="Centrality Score")
fit<-lm(scores[years>1950]~years[years>1950])
abline(fit)
min(scores,na.rm = T)
plot(years[years>1950],scores[years>1950],type="b",
ylim=c(min(scores[years>1950],na.rm = T)-0.1,max(scores[years>1950],na.rm=T)+0.1),
main=paste("Centrality Scores for ",c," since 1950",sep=""),
xlab="Year",ylab="Centrality Score")
fit<-lm(scores[years>1950]~years[years>1950])
abline(fit)
2+2
2*2+2
2*(2+2)
2*2^2+2*2-2
net<-read.csv("C:/Users/Tim/Dropbox/net.csv",header=T,stringsAsFactors=F)
sum(net$ï..Net[which(net$ï..Net>0)])
sum(net$ï..Net[which(net$ï..Net<0)])
net<-read.csv("C:/Users/Tim/Dropbox/download.csv",header=T,stringsAsFactors=F)
sum(net$Net[which(net$Address.Status=="Non-Confirmed")])
sum(net$Fee)
sum(net$Fee[!is.na(net$Fee)])
set.seed(5165)
gg<-random.graph.game(100,0.3,"gnp",directed=T)
library(igraph)
set.seed(5165)
gg<-random.graph.game(100,0.3,"gnp",directed=T)
V(gg)$attr<-sample(0:3,100,replace=T)
V(gg)$group<-sample(1:5,100,replace=T)
vertex.attributes(gg)
set.seed(5165)
gg<-random.graph.game(100,0.3,"gnp",directed=T)
V(gg)$group<-sample(1:5,100,replace=T)
vertex.attributes(gg)
vertex.attributes(gg)
vertex.attributes(gg)
vertex.attributes(gg)
vertex.attributes(gg)
homophily(gg,"group")
homophily<-function(graph,vertex.attr,attr.val=NULL,prop=T){
#Assign names as vertex attributes for edgelist output#
V(graph)$name<-vertex_attr(graph,vertex.attr)
#Get the basic edgelist#
ee<-get.data.frame(graph)
#If not specifying on particular attribute value, get percentage (prop=T)#
#or count (prop=F) of all nodes tied with matching attribute#
if(is.null(attr.val)){
ifelse(prop==T,sum(ee[,1]==ee[,2])/nrow(ee),sum(ee[,1]==ee[,2]))
#If not null, get proportion (prop=T) or count (prop=F) of#
#edges among nodes with that particular node attribute value#
} else {
ifelse(prop==T,sum(ee[,1]==attr.val & ee[,2]==attr.val)/nrow(ee[ee[,1]==attr.val|ee[,2]==attr.val,]),
sum(ee[,1]==attr.val & ee[,2]==attr.val))
}
}
homophily(gg,"group")
homophily(gg,"group",prop=F)
homophily(gg,"attr",0)
homophily(gg,"attr",2)
homophily(gg,"group",2)
V(gg)$animal<-sample(c("giraffe","pig","monkey","wombat"),100,replace=T)
homophily(gg,"animal","giraffe")
homophily(gg,"animal","pig")
homophily(gg,"animal","monkey")
homophily(gg,"animal","wombat")
homophily(gg,"animal")
graph<-random.graph.game(100,0.3,"gnp",directed=T)
homo<-as.vector(rep(NA,vcount(graph)))
homo
t<-1
i<-V(graph)[t]
alters<-ego(graph,1,nodes=V(graph)[t],mode="out")
alters
V(graph)$vertex.attr<-sample(1:5,100,replace=T)
ego.char<-get.vertex.attribute(graph,vertex.attr,V(graph)[t])
V(graph)$vertex.attr<-sample(1:5,100,replace=T)
ego.char<-get.vertex.attribute(graph,vertex.attr,V(graph)[t])
ego.char<-get.vertex.attribute(graph,"vertex.attr",V(graph)[t])
vertex.attr<-"vertex.attr"
ego.char<-get.vertex.attribute(graph,vertex.attr,V(graph)[t])
get.vertex.attribute(graph,vertex.attr,alters[[1]])
get.vertex.attribute(graph,vertex.attr,alters)
alters
sum(get.vertex.attribute(graph,vertex.attr,alters[[1]])==get.vertex.attribute(graph,vertex.attr,V(graph)[t]))
ec<-get.vertex.attribute(graph,vertex.attr,V(graph)[t])
sum(get.vertex.attribute(graph,vertex.attr,alters[[1]])==ec)
sum(get.vertex.attribute(graph,vertex.attr,alters[[1]])==ec)/length(alters[[1]])
degree(graph,V(graph)[t])>0
ego_homophily<-function(graph,vertex.attr){
#Get an empty vector of node-egonet homophily scores#
homo<-as.vector(rep(NA,vcount(graph)))
#For every node t in the network, we repeat the following:#
for(t in 1:vcount(graph)){
#Only get homophily of ego-net if the node has neighbors, otherwise stays NA#
if(degree(graph,V(graph)[t])>0){
#Collect the neighbors of the node in question#
alters<-ego(graph,1,nodes=V(graph)[t],mode="out")
#Collect the node's value on the specified attribute#
ec<-get.vertex.attribute(graph,vertex.attr,V(graph)[t])
#Get proportion of neighbors with matching attribute value, assign to spot in vector#
homo[i]<-sum(get.vertex.attribute(graph,vertex.attr,alters[[1]])==ec)/length(alters[[1]])
}
}
return(homo)
}
ego_homophily(graph)
ego_homophily(graph,"vertex.attr")
V(graph)$animal<-sample(c("cat","dog"),100,replace=T)
ego_homophily(graph,"animal")
ego_homophily<-function(graph,vertex.attr){
#Get an empty vector of node-egonet homophily scores#
homo<-as.vector(rep(NA,vcount(graph)))
#For every node t in the network, we repeat the following:#
for(t in 1:vcount(graph)){
#Only get homophily of ego-net if the node has neighbors, otherwise stays NA#
if(degree(graph,V(graph)[t])>0){
#Collect the neighbors of the node in question#
alters<-ego(graph,1,nodes=V(graph)[t],mode="out")
#Collect the node's value on the specified attribute#
ec<-get.vertex.attribute(graph,vertex.attr,V(graph)[t])
#Get proportion of neighbors with matching attribute value, assign to spot in vector#
homo[t]<-sum(get.vertex.attribute(graph,vertex.attr,alters[[1]])==ec)/length(alters[[1]])
}
}
return(homo)
}
ego_homophily(graph,"animal")
set.seed(5972)
V(gg)$gender<-sample(c("Female","Male"),100,replace=T)
V(gg)$education<-sample(c("None","High School","College"),100,replace=T)
V(gg)$homophily<-ego_homophily(graph = gg, vertex.attr = "education")
V(gg)$homophily
mean(V(gg)$homophily)
V(gg)$gender<-sample(c("Female","Male"),100,replace=T)
V(gg)$education<-sample(c("None","High School","College"),100,replace=T)
V(gg)$homophily<-ego_homophily(graph = gg, vertex.attr = "education")
V(gg)$homophily
mean(V(gg)$homophily)
V(gg)$homophily[V(gg)$gender=="Male"]
V(gg)$homophily[V(gg)$gender=="Female"]
mean(V(gg)$homophily[V(gg)$gender=="Female"])
mean(V(gg)$homophily[V(gg)$gender=="Male"])
V(gg)$homophily
V(gg)$homophily
V(gg)$homophily
mean(V(gg)$homophily)
sd(V(gg)$homophily)
hist(V(gg)$homophily,main="Histogram of Ego-Network Homophily",
xlab="Ego-Network Homophily",density=T)
hist(V(gg)$homophily,main="Histogram of Ego-Network Homophily",
xlab="Ego-Network Homophily",freq=F)
lines(density(V(gg)$homophily),lty="dotted",lwd=2,col="red")
hist(V(gg)$homophily,main="Histogram of Ego-Network Homophily",
xlab="Ego-Network Homophily",freq=F,xlim=c(0,1))
lines(density(V(gg)$homophily),lty="dotted",lwd=2,col="red")
lines(density(V(gg)$homophily),lty="dotted",lwd=2,col="red")
abline(v=mean(V(gg)$homophily),lwd=2,col="blue")
V(gg)$homophily[V(gg)$gender=="Male"]
V(gg)$homophily[V(gg)$gender=="Male"]
V(gg)$homophily[V(gg)$gender=="Male"]
mean(V(gg)$homophily[V(gg)$gender=="Male"])
V(gg)$homophily[V(gg)$gender=="Female"]
mean(V(gg)$homophily[V(gg)$gender=="Female"])
library("abind", lib.loc="~/R/win-library/3.3")
detach("package:abind", unload=TRUE)
sessionInfo()$name
library("abind", lib.loc="~/R/win-library/3.3")
library("abind", lib.loc="~/R/win-library/3.3")
sessionInfo()$name
detach("package:abind", unload=TRUE)
setwd("C:/Users/Tim/Dropbox/Democracy Meaning/Survey Re-Analysis/Cleaned Scripts and Data/")
library(igraph)
library(sna)
library(ggplot2)
library(GGally)
load("freeResponseDataCurrent.RData")
load("freeResponseDataCurrent.RData")
dim(sub.dtm1)
View(cat.ttm)
dim(sub.dtm)
library(tm)
DTM<-DocumentTermMatrix(mycorpus)
DTMMAT<-as.matrix(DTM)
TTM<-t(DTMMAT) %*% DTMMAT
FREQ<-diag(TTM)
names(FREQ)<-colnames(TTM)
plot(sort(FREQ))
plot(sort(FREQ),ylab="Frequency")
plot(sort(FREQ),ylab="Frequency",main="Term Frequency within Corpus")
